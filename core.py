"""
core.py
Configura√ß√£o central do agente aut√¥nomo EDA (LangChain + Gemini)
"""

from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.memory import ConversationBufferMemory
from langchain.agents import initialize_agent, AgentType

# Importa todas as ferramentas do m√≥dulo EDA
from eda_tools import (
    carregar_csv,
    estatisticas_descritivas,
    valores_nulos,
    gerar_histograma,
    gerar_mapa_correlacao,
    executar_kmeans,
    metodo_elbow,
    gerar_boxplot,
    gerar_dispersao,
    detectar_outliers,
)

# =====================================================
# üß† Configura√ß√£o do Modelo Gemini
# =====================================================
llm = ChatGoogleGenerativeAI(
    model="gemini-pro",   # ‚úÖ Modelo est√°vel e compat√≠vel
    temperature=0.3       # Controla criatividade
)

# =====================================================
# üíæ Mem√≥ria de Conversa
# =====================================================
memory = ConversationBufferMemory(
    memory_key="chat_history",
    return_messages=True
)

# =====================================================
# üß∞ Lista de Ferramentas
# =====================================================
tools = [
    carregar_csv,
    estatisticas_descritivas,
    valores_nulos,
    gerar_histograma,
    gerar_mapa_correlacao,
    executar_kmeans,
    metodo_elbow,
    gerar_boxplot,
    gerar_dispersao,
    detectar_outliers,
]

# =====================================================
# ü§ñ Cria√ß√£o do Agente
# =====================================================
agente = initialize_agent(
    tools=tools,
    llm=llm,
    agent_type=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
    memory=memory,
    verbose=True
)

# =====================================================
# üöÄ Fun√ß√£o de Execu√ß√£o
# =====================================================
def executar_agente(prompt: str) -> str:
    """
    Executa o agente com base no comando fornecido pelo usu√°rio.
    """
    try:
        resposta = agente.run(prompt)
        return resposta
    except Exception as e:
        return f"‚ùå Erro ao executar o agente: {e}"
